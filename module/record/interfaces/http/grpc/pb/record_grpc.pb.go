// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: module/record/interfaces/http/grpc/pb/record.proto

package record

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordCommandService_CreateRecord_FullMethodName = "/record.RecordCommandService/CreateRecord"
)

// RecordCommandServiceClient is the client API for RecordCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordCommandServiceClient interface {
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordCommandServiceClient(cc grpc.ClientConnInterface) RecordCommandServiceClient {
	return &recordCommandServiceClient{cc}
}

func (c *recordCommandServiceClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, RecordCommandService_CreateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordCommandServiceServer is the server API for RecordCommandService service.
// All implementations must embed UnimplementedRecordCommandServiceServer
// for forward compatibility.
type RecordCommandServiceServer interface {
	CreateRecord(context.Context, *CreateRecordRequest) (*RecordResponse, error)
	mustEmbedUnimplementedRecordCommandServiceServer()
}

// UnimplementedRecordCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordCommandServiceServer struct{}

func (UnimplementedRecordCommandServiceServer) CreateRecord(context.Context, *CreateRecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedRecordCommandServiceServer) mustEmbedUnimplementedRecordCommandServiceServer() {}
func (UnimplementedRecordCommandServiceServer) testEmbeddedByValue()                              {}

// UnsafeRecordCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordCommandServiceServer will
// result in compilation errors.
type UnsafeRecordCommandServiceServer interface {
	mustEmbedUnimplementedRecordCommandServiceServer()
}

func RegisterRecordCommandServiceServer(s grpc.ServiceRegistrar, srv RecordCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordCommandService_ServiceDesc, srv)
}

func _RecordCommandService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCommandServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCommandService_CreateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCommandServiceServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordCommandService_ServiceDesc is the grpc.ServiceDesc for RecordCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "record.RecordCommandService",
	HandlerType: (*RecordCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _RecordCommandService_CreateRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/record/interfaces/http/grpc/pb/record.proto",
}

const (
	RecordQueryService_GetRecordByID_FullMethodName = "/record.RecordQueryService/GetRecordByID"
)

// RecordQueryServiceClient is the client API for RecordQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordQueryServiceClient interface {
	GetRecordByID(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordQueryServiceClient(cc grpc.ClientConnInterface) RecordQueryServiceClient {
	return &recordQueryServiceClient{cc}
}

func (c *recordQueryServiceClient) GetRecordByID(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, RecordQueryService_GetRecordByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordQueryServiceServer is the server API for RecordQueryService service.
// All implementations must embed UnimplementedRecordQueryServiceServer
// for forward compatibility.
type RecordQueryServiceServer interface {
	GetRecordByID(context.Context, *GetRecordRequest) (*RecordResponse, error)
	mustEmbedUnimplementedRecordQueryServiceServer()
}

// UnimplementedRecordQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordQueryServiceServer struct{}

func (UnimplementedRecordQueryServiceServer) GetRecordByID(context.Context, *GetRecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordByID not implemented")
}
func (UnimplementedRecordQueryServiceServer) mustEmbedUnimplementedRecordQueryServiceServer() {}
func (UnimplementedRecordQueryServiceServer) testEmbeddedByValue()                            {}

// UnsafeRecordQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordQueryServiceServer will
// result in compilation errors.
type UnsafeRecordQueryServiceServer interface {
	mustEmbedUnimplementedRecordQueryServiceServer()
}

func RegisterRecordQueryServiceServer(s grpc.ServiceRegistrar, srv RecordQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordQueryService_ServiceDesc, srv)
}

func _RecordQueryService_GetRecordByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordQueryServiceServer).GetRecordByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordQueryService_GetRecordByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordQueryServiceServer).GetRecordByID(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordQueryService_ServiceDesc is the grpc.ServiceDesc for RecordQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "record.RecordQueryService",
	HandlerType: (*RecordQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecordByID",
			Handler:    _RecordQueryService_GetRecordByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/record/interfaces/http/grpc/pb/record.proto",
}
